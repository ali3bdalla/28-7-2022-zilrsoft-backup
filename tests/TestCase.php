<?php

namespace Tests;

use App\Jobs\Accounting\Chart\CreateAmericanChartOfAccountsJob;
use App\Models\Manager;
use App\Models\Organization;
use App\Models\User;
use Illuminate\Foundation\Testing\TestCase as BaseTestCase;
use Illuminate\Foundation\Testing\WithFaker;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication, WithFaker;


    public function actingAsUser()
    {
        $this->organizationProvider();
        $user = factory(User::class)->create(['organization_id' => 1, 'phone_number' => '966324018', 'country_code' => '249']);
        $this->actingAs($user, 'client');

    }

    public function actingAsManager()
    {
        $this->actingAs($this->organizationProvider(), 'manager');
    }

    public function organizationProvider()
    {
        $organization = factory(Organization::class)->create();
        $organization->addTranslate(['en' => $this->faker->name, 'ar' => $this->faker->name], $this->faker->name, 'title');
        $organization->addTranslate(['en' => $this->faker->sentence, 'ar' => $this->faker->sentence], $this->faker->name, 'description');
        $manager = $this->managerProvider($organization->id);
        $organization->fill(['supervisor_id' => $manager->user_id]);
        $organization->save();
        dispatch(new CreateAmericanChartOfAccountsJob($organization, $manager));
        return $manager;
    }

    public function managerProvider($organizationId)
    {
        $user = factory(User::class)->create(
            [
                'organization_id' => $organizationId
            ]
        );
        return factory(Manager::class)->create(
            [
                'user_id' => $user->id,
                'organization_id' => $organizationId
            ]
        );
    }

    public function accountProvider(Organization $organization, $slug = null)
    {
        $query = $organization->accounts();
        if ($slug) {
            $query = $query->where('slug', $slug);
        }

        return $query->inRandomOrder()->first();
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->organizationProvider();
    }

}
