<?php
	
	
	namespace Tests\Unit;
	
	
	use App\Account;
	use App\Invoice;
	use App\Transaction;
	use Tests\TestCase;
	
	class MakeTransaction extends TestCase
	{
		
		private $invoice;
		private $stock;
		
		/**
		 * @test
		 */
		public function createPurchaseInvoiceItemsTransactions()
		{
			
			$items = $this->invoice->items;
			foreach ($items as $item){
				$transaction = $item->item->debit_transaction()->create([
					'creator_id' => auth()->user()->id,
					'organization_id' => auth()->user()->organization_id,
					'creditable_id' => $this->stock->id,
					'creditable_type' => get_class($this->stock),
					'amount' => $item->net,
					'user_id' => $item->user_id
				]);
				$this->assertInstanceOf(Transaction::class,$transaction);
			}
			
			
		}
		
		/**
		 * @test
		 */
		public function createPurchaseInvoicePaymentsTransactions()
		{
			$gateways = Account::where('slug','gateway')->inRandomOrder()->take(3)->get();
			foreach ($gateways as $gateway){
				$transaction = $gateway->debit_transaction()->create([
					'creator_id' => auth()->user()->id,
					'organization_id' => auth()->user()->organization_id,
					'creditable_id' => $this->stock->id,
					'creditable_type' => get_class($this->stock),
					'amount' => $this->invoice->net / 3,
					'user_id' => $this->invoice->user_id
				]);
				$this->assertInstanceOf(Transaction::class,$transaction);
			}
			
		}
		
		protected function setUp():void
		{
			parent::setUp(); // TODO: Change the autogenerated stub
			auth()->loginUsingId(1);
			$this->stock = Account::where('slug','stock')->first();
			$this->invoice = Invoice::where('invoice_type','purchase')->first();
		}
		
	}