<?php
//
//namespace Tests\Feature;
//
//use App\Payment;
//use App\Item;
//use App\Gateway;
//use App\PurchaseInvoice;
//use App\SaleInvoice;
//use Tests\TestCase;
//use Illuminate\Foundation\Testing\WithFaker;
//use Illuminate\Foundation\Testing\RefreshDatabase;
//
//class PurchaseTest extends TestCase
//{
//
//    use WithFaker;
//
//    protected function setUp(): void
//    {
//        parent::setUp(); // TODO: Change the autogenerated stub
//        auth()->loginUsingId(1);
//    }
//
//    /**
//     * A basic feature test example.
//     *
//     * @return void
//     * @test
//     */
//    public function testCreation()
//    {
//
//        $data_source_items = Item::find([256]);
//        $items = [];
//        $total = 0;
//        $tax = 0;
//        $subtotal = 0;
//        $net = 0;
//        foreach ($data_source_items as $item){
//            $item['purchase_price'] = 38;
//            $item['qty'] = 10;
//
//
//            if($item['is_need_serial']){
//                $item['serials'] = [
//                    $this->faker->numberBetween(),
//                    $this->faker->numberBetween(),
//                    $this->faker->numberBetween(),
//                    $this->faker->numberBetween(),
//                    $this->faker->numberBetween(),
//                    $this->faker->numberBetween(),
//                    $this->faker->numberBetween(),
//
//                ];
//                $item['qty'] = count($item['serials']);
//            }
//
//            $item['total'] = $item['purchase_price'] *  $item['qty'];
////            $item['discount'] = $this->faker->numberBetween(3,10);
//            $item['discount'] = 0;
//            $item['subtotal'] = $item['total']  -  $item['discount'];
//            $item['tax'] = 2;
//            $item['net'] = $item['subtotal'] +  $item['tax'];
//
//
//            if(!$item['is_kit']){
//                $items[] = $item;
//                $total+=$item['total'];
//                $subtotal+=$item['subtotal'];
//                $net+=$item['net'];
//                $tax+=$item['tax'];
//            }
//
//
//
//        }
//
//        $data_source_billings = Gateway::all();
//        $billings = [];
//        if(!empty($data_source_billings)){
//            foreach ($data_source_billings as $billing){
//                $billing['amount'] = $net;
//                $billings[] = $billing;
//            }
//        }
//
//        $data = [
//            'receiver_id'=>auth()->user()->id,
//            'vendor_id'=>auth()->user()->user->id,
//            'creator_id'=>auth()->user()->id,
//            'department_id'=>auth()->user()->department->id,
//            'branch_id'=>auth()->user()->branch->id,
//            'total'=>$this->faker->numberBetween(1,100),
//            'subtotal'=>$this->faker->numberBetween(1,100),
//            'discount_value'=>0,
//            'discount_percent'=>0,
//            'total'=>$total,
//            'tax'=>$tax,
//            'vendor_inc_number'=>'' . $this->faker->numberBetween(),
//            'remaining'=>$this->faker->numberBetween(1,100),
//            'net'=>$net,
//            'items'=>$items,
//            'methods'=>$billings
//        ];
//
//        $response =
//            $this->withHeaders(
//                [
//                    'HTTP_Authorization' => csrf_token(),
//                    'X-Requested-With'=>'XMLHttpRequest'
//                ]
//            )
//                ->json('POST','/management/purchases',$data);
////        $response->dump();
//
//        $response->assertOk();
//    }
//
//
//
//
////
////    /**
////     * A basic feature test example.
////     *
////     * @return void
////     * @test
////     */
////    public function testReturen()
////    {
////        $purchase = PurchaseInvoice::find(1);
////        $invoice = $purchase->invoice;
////        $items = [];
////        $total = 0;
////        $tax = 0;
////        $subtotal = 0;
////        $net = 0;
////        foreach ($purchase->invoice->items()->with('item')->get() as $item) {
////            $item['returned_qty'] = 1;
////            if($item->item->is_need_serial){
////                $item['serials'] = $item->item->serials()->where('purchase_invoice_id',$invoice->id)->get()
////                    ->pluck('serial')->toArray();
////                $item['returned_qty'] = count( $item['serials']);
////            }
////
////            $items [] = $item;
////            $total+=$item['total'];
////            $subtotal+=$item['subtotal'];
////            $net+=$item['net'];
////            $tax+=$item['tax'];
////        }
////
////        $data_source_billings = Gateway::all();
////        $billings = [];
////        foreach ($data_source_billings as $billing){
////            $billing['amount'] = $net;
////            $billings[] = $billing;
////        }
////
////        $data = [
////
////            'total'=>100,
////            'subtotal'=>100,
////            'discount_value'=>0,
////            'discount_percent'=>0,
////            'total'=>$total,
////            'tax'=>$tax,
////            'remaining'=>0,
////            'net'=>$net,
////            'items'=>$items,
////            'methods'=>$billings
////        ];
////
////        $response =
////            $this->withHeaders(
////                [
////                    'HTTP_Authorization' => csrf_token(),
////                    'X-Requested-With'=>'XMLHttpRequest'
////                ]
////            )
////                ->json('put','/management/purchases/1',$data);
////        $response->dump();
////
////        $response->assertOk();
////    }
//}
