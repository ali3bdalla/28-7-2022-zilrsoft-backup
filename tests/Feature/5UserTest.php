<?php
	
	namespace Tests\Feature;
	
	use App\Account;
	use App\Branch;
	use Illuminate\Foundation\Testing\WithFaker;
	use Tests\TestCase;
	
	class UserTest extends TestCase
	{
		
		use WithFaker;
		
		/**
		 * A basic feature test example.
		 *
		 * @test
		 * @return void
		 */
		public function toCreateManager()
		{
			
			$gateways = Account::where('is_gateway',true)->get();
			$branch = Branch::inRandomOrder()->with('departments')->first();
			
			$data = [
				'user_type' => 'individual',
				'user_title' => 'mr',
				'can_make_credit' => false,
				'is_manager' => true,
				'name' => $this->faker->name,
				'phone_number' => $this->faker->phoneNumber,
				'is_supplier' => false,
				'is_client' => true,
				'is_vendor' => false,
				'branch_id' => $branch->id,
				'department_id' => $branch->departments[0]->id,
				'email' => $this->faker->email,
				'pin_code' => $this->faker->buildingNumber,
				'password' => 'password',
				'password_confirmation' => 'password',
				'gateways' => $gateways
			];
			
			$response = $this->json('post',route('management.users.store'),$data);

//			$response->dump();
			$response->assertStatus(201);
		}
		
		/**
		 * A basic feature test example.
		 *
		 * @test
		 * @return void
		 */
		public function toCreateVendor()
		{
			
			$accounts = Account::where('slug','gateway')->get();
			$user_gateways = [];
			foreach ($accounts as $account){
				$account['account_name'] = $this->faker->address;
				$user_gateways[] = $account;
				
			}
			
			$data = [
				'user_type' => 'individual',
				'user_title' => 'mr',
				'can_make_credit' => false,
				'is_manager' => false,
				'name' => $this->faker->name,
				'phone_number' => $this->faker->phoneNumber,
				'is_supplier' => false,
				'is_client' => true,
				'is_vendor' => true,
				'email' => $this->faker->email,
				'pin_code' => $this->faker->buildingNumber,
				'user_gateways' => $user_gateways
			];
			
			$response = $this->json('post',route('management.users.store'),$data);

//			$response->dump();
			$response->assertStatus(201);
		}
		
		protected function setUp():void
		{
			parent::setUp(); // TODO: Change the autogenerated stub
			auth()->loginUsingId(1);
		}
	}
