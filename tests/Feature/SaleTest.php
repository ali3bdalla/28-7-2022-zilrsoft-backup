<?php

namespace Tests\Feature;

use App\InvoiceItems;
use App\Item;
use App\Gateway;
use App\PurchaseInvoice;
use App\SaleInvoice;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class SaleTest extends TestCase
{

    use WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        auth()->loginUsingId(1);
    }

    /**
     * A basic feature test example.
     *
     * @return void
     * @test
     */
    public function testCreation()
    {

        $data_source_items = Item::whereIn('id',[256])->get();
        $items = [];
        $total = 0;
        $tax = 0;
        $subtotal = 0;
        $net = 0;
        foreach ($data_source_items as $item){
            $item['qty'] = 1;
            $item['total'] = $item['price'] *  $item['qty'];
            $item['tax'] = 5;
            $item['discount'] = 0;
            $item['subtotal'] = $item['total'] + $item['discount'];
            $item['net'] =  $item['subtotal'] - $item['tax'];


            $items[] = $item;
            $total+=$item['total'];
            $subtotal+=$item['subtotal'];
            $net+=$item['net'];
            $tax+=$item['tax'];




        }

        $data_source_billings = Gateway::all();
        $billings = [];
        if(!empty($data_source_billings)){
            foreach ($data_source_billings as $billing){
                $billing['amount'] = $net;
                $billings[] = $billing;
            }
        }

        $data = [
            'salesman_id'=>auth()->user()->id,
            'client_id'=>auth()->user()->user->id,
            'creator_id'=>auth()->user()->id,
            'department_id'=>auth()->user()->department->id,
            'branch_id'=>auth()->user()->branch->id,
            'total'=>$this->faker->numberBetween(1,100),
            'subtotal'=>$this->faker->numberBetween(1,100),
            'discount_value'=>0,
            'discount_percent'=>0,
            'total'=>$total,
            'tax'=>$tax,
            'remaining'=>$this->faker->numberBetween(1,100),
            'net'=>$net,
            'items'=>$items,
            'methods'=>$billings
        ];

        $response =
            $this->withHeaders(
                [
                    'HTTP_Authorization' => csrf_token(),
                    'X-Requested-With'=>'XMLHttpRequest'
                ]
            )
                ->json('POST','/management/sales',$data);
        $response->dump();

        $response->assertOk();
    }




//
//    /**
//     * A basic feature test example.
//     *
//     * @return void
//     * @test
//     */
//    public function testReturen()
//    {
//
//        $sale = SaleInvoice::find(1);
//
//        $items = [];
//        foreach ($sale->invoice->items()->with('item')->get() as $item) {
//            $item['returned_qty'] = 1;
//
//            $items [] = $item;
//        }
//
//
//        $data = [
//
//            'items'=>$items
//
//        ];
//
//        $response =
//            $this->withHeaders(
//                [
//                    'HTTP_Authorization' => csrf_token(),
//                    'X-Requested-With'=>'XMLHttpRequest'
//                ]
//            )
//                ->json('put','/management/sales/1',$data);
//        $response->dump();
//
//        $response->assertOk();
//
//    }
}
