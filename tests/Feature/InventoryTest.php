<?php
//
//namespace Tests\Feature;
//
//use App\Item;
//use App\Gateway;
//use Tests\TestCase;
//use Illuminate\Foundation\Testing\WithFaker;
//use Illuminate\Foundation\Testing\RefreshDatabase;
//
//class InventoryTest extends TestCase
//{
//    use  WithFaker;
//
//    protected function setUp(): void
//    {
//        parent::setUp(); // TODO: Change the autogenerated stub
//        auth()->loginUsingId(1);
//    }
//
//    /**
//     * A basic feature test example.
//     *
//     * @return void
//     * @test
//     */
//    public function testCreation()
//    {
//
//        $data_source_items = Item::find([256]);
//        $items = [];
//        $total = 0;
//        $tax = 0;
//        $subtotal = 0;
//        $net = 0;
//        foreach ($data_source_items as $item){
//            $item['purchase_price'] = 38;
//            $item['qty'] = 10;
//
//
//            if($item['is_need_serial']){
//                $item['serials'] = [
//                    $this->faker->numberBetween(),
//                    $this->faker->numberBetween(),
//                    $this->faker->numberBetween(),
//                    $this->faker->numberBetween(),
//                    $this->faker->numberBetween(),
//                    $this->faker->numberBetween(),
//                    $this->faker->numberBetween(),
//
//                ];
//                $item['qty'] = count($item['serials']);
//            }
//
//            $item['total'] = $item['purchase_price'] *  $item['qty'];
////            $item['discount'] = $this->faker->numberBetween(3,10);
//            $item['discount'] = 0;
//            $item['subtotal'] = $item['total']  -  $item['discount'];
//            $item['tax'] = 2;
//            $item['net'] = $item['subtotal'] +  $item['tax'];
//
//
//            if(!$item['is_kit']){
//                $items[] = $item;
//                $total+=$item['total'];
//                $subtotal+=$item['subtotal'];
//                $net+=$item['net'];
//                $tax+=$item['tax'];
//            }
//
//
//
//        }
//
//        $data_source_billings = Gateway::all();
//        $payments = [];
//        if(!empty($data_source_billings)){
//            foreach ($data_source_billings as $billing){
//                $billing['amount'] = $net;
//                $payments[] = $billing;
//            }
//        }
//
//        $data = [
//            'receiver_id'=>auth()->user()->id,
//            'vendor_id'=>auth()->user()->user->id,
//            'creator_id'=>auth()->user()->id,
//            'department_id'=>auth()->user()->department->id,
//            'branch_id'=>auth()->user()->branch->id,
//            'total'=>$this->faker->numberBetween(1,100),
//            'subtotal'=>$this->faker->numberBetween(1,100),
//            'discount_value'=>0,
//            'discount_percent'=>0,
//            'total'=>$total,
//            'tax'=>$tax,
//            'vendor_inc_number'=>'' . $this->faker->numberBetween(),
//            'remaining'=>$this->faker->numberBetween(1,100),
//            'net'=>$net,
//            'items'=>$items,
//            'methods'=>$payments
//        ];
//
//        $response =
//            $this->withHeaders(
//                [
//                    'HTTP_Authorization' => csrf_token(),
//                    'X-Requested-With'=>'XMLHttpRequest'
//                ]
//            )
//                ->json('POST','/management/inventories/beginning',$data);
////        $response->dump();
//
//        $response->assertOk();
//    }
//
//
//}
