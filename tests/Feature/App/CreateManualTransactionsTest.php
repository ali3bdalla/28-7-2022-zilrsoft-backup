<?php

namespace Tests\Feature\App;

use App\Models\Manager;
use App\Models\TransactionsContainer;
use Illuminate\Database\ConnectionInterface;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class CreateManualTransactionsTest extends TestCase
{


    /**
     * @var ConnectionInterface
     */
    private $dbConnection;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->dbConnection = DB::connection('data_source');

    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_create_manual_transactions()
    {

        $transactionsContainers = $this->dbConnection->table('transactions_containers')
            ->where([
                ['invoice_id','0'],
                ['is_pending','0'],
            ])->get();

        $manager = Manager::find(1);

        foreach ($transactionsContainers as $container)
        {

            echo "\n{$container->id}";
            $transactions = $this->dbConnection->table('transactions')->where([
                ['container_id',$container->id],
                ['invoice_id',null],
            ])->get();

            $debitAmount = 0;
            $creditAmount = 0;

            $requestTransactions = [];
            foreach ($transactions as $transaction)
            {


                if($transaction->amount > 0)
                {
                    $singleData['amount'] = $transaction->amount;
                    $singleData['user_id'] = $transaction->user_id;

                    if($transaction->creditable_type != null && $transaction->creditable_id != null)
                    {
                        $singleData['type'] = 'credit';
                        $singleData['id'] = $transaction->creditable_id;

                        $creditAmount+=$transaction->amount;
                    }else
                    {
                        $singleData['type']  = 'debit';
                        $singleData['id'] = $transaction->debitable_id;
                        $debitAmount+=$transaction->amount;

                    }
                    $requestTransactions[]= $singleData;
                }

            }
            if($creditAmount > 0 && round($creditAmount) == round($debitAmount))
            {
                $response = $this->actingAs($manager)->postJson('/api/entities',[
                    'transactions' => $requestTransactions,
                    'description' => $container->description
                ]);




                $response->dump()->assertCreated();
                $entity = json_decode($response->content(),true);

                $createdEntity = TransactionsContainer::find($entity['id']);

                $createdEntity->update([
                   'created_at' => $container->created_at
                ]);

                $createdEntity->transactions()->update([
                    'created_at' => $container->created_at
                ]);


            }

//            dd($creditAmount,$debitAmount);


        }

    }
}
